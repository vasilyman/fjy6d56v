{"version":3,"file":"js/321.js","mappings":"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","sources":["webpack:///./shared/btnGroup/index.tsx","webpack:///./shared/btnGroup/style.module.scss?22d5","webpack:///./app/apollo/type.ts","webpack:///./entities/orderStatus/index.ts","webpack:///./entities/order/item/index.tsx","webpack:///./entities/order/item/style.module.scss?7302","webpack:///./widgets/orderList/index.tsx","webpack:///./widgets/orderList/style.module.scss?80b6","webpack:///./pages/ordersPage/index.tsx"],"sourcesContent":["import React, { type FC } from 'react';\nimport $style from './style.module.scss';\nimport cn from 'clsx';\nimport { Icon } from '../icon';\n\ntype Item = {\n  title: string;\n  value: string;\n  loading?: boolean;\n};\n\ntype Props = {\n  items: Item[];\n  value: string;\n  name: string;\n  onChange: (v: string) => void;\n};\n\nexport const BtnGroup: FC<Props> = ({ items, value, name, onChange }) => {\n  return (\n    <div className={$style['btn-group']}>\n      {items.map((item) => (\n        <div\n          className={cn($style['btn-group__btn'], value === item.value && $style['btn-group__btn_checked'])}\n          key={item.value}\n        >\n          <input\n            id={`${name}-${item.value}`}\n            type=\"radio\"\n            name={name}\n            checked={value === item.value}\n            value={item.value}\n            className={$style['btn-group__input']}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={item.loading}\n          />\n          <label htmlFor={`${name}-${item.value}`} className={$style['btn-group__label']}>\n            {item.title}\n            {item.loading && <Icon name=\"spinner\" className={$style['btn-group__icon']} />}\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn-group\":\"style-module_btn-group-P9zJF\",\"btn-group__btn\":\"style-module_btn-group__btn-PKugA\",\"btn-group__btn_checked\":\"style-module_btn-group__btn_checked-HA2qw\",\"btn-group__input\":\"style-module_btn-group__input-VAygo\",\"btn-group__label\":\"style-module_btn-group__label-Ym55V\",\"btn-group__icon\":\"style-module_btn-group__icon-XZF4v\",\"spin\":\"style-module_spin-h1Dp4\"};","export type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string };\n  String: { input: string; output: string };\n  Boolean: { input: boolean; output: boolean };\n  Int: { input: number; output: number };\n  Float: { input: number; output: number };\n  Date: { input: any; output: any };\n};\n\nexport type AuthResult = {\n  __typename?: 'AuthResult';\n  profile: Profile;\n  token: Scalars['String']['output'];\n};\n\nexport type CategoriesResponse = {\n  __typename?: 'CategoriesResponse';\n  data?: Maybe<Array<Maybe<Category>>>;\n  pagination: ResponsePagination;\n  sorting: Sorting;\n};\n\nexport type Category = {\n  __typename?: 'Category';\n  commandId: Scalars['String']['output'];\n  createdAt: Scalars['Date']['output'];\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  photo?: Maybe<Scalars['String']['output']>;\n  updatedAt: Scalars['Date']['output'];\n};\n\nexport type CategoryAddInput = {\n  name: Scalars['String']['input'];\n  photo?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type CategoryGetManyInput = {\n  createdAt?: InputMaybe<DateRange>;\n  ids?: InputMaybe<Array<Scalars['String']['input']>>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  pagination?: InputMaybe<PaginationInput>;\n  sorting?: InputMaybe<SortingInput>;\n  updatedAt?: InputMaybe<DateRange>;\n};\n\nexport type CategoryMutations = {\n  __typename?: 'CategoryMutations';\n  add: Category;\n  patch: Category;\n  put: Category;\n  remove: Category;\n};\n\nexport type CategoryMutationsAddArgs = {\n  input: CategoryAddInput;\n};\n\nexport type CategoryMutationsPatchArgs = {\n  id: Scalars['ID']['input'];\n  input: CategoryUpdateInput;\n};\n\nexport type CategoryMutationsPutArgs = {\n  id: Scalars['ID']['input'];\n  input: CategoryUpdateInput;\n};\n\nexport type CategoryMutationsRemoveArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type CategoryQueries = {\n  __typename?: 'CategoryQueries';\n  getMany: CategoriesResponse;\n  getOne?: Maybe<Category>;\n};\n\nexport type CategoryQueriesGetManyArgs = {\n  input?: InputMaybe<CategoryGetManyInput>;\n};\n\nexport type CategoryQueriesGetOneArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type CategoryUpdateInput = {\n  name: Scalars['String']['input'];\n  photo?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type ChangePasswordBody = {\n  newPassword: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\nexport type ChangePasswordInput = {\n  newPassword: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\nexport type ChangePasswordResult = {\n  __typename?: 'ChangePasswordResult';\n  success: Scalars['Boolean']['output'];\n};\n\nexport type Cost = {\n  __typename?: 'Cost';\n  amount: Scalars['Float']['output'];\n  category: Category;\n  commandId: Scalars['String']['output'];\n  createdAt: Scalars['Date']['output'];\n  date: Scalars['Date']['output'];\n  desc?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  type: Scalars['String']['output'];\n  updatedAt: Scalars['Date']['output'];\n};\n\nexport type DateRange = {\n  gte?: InputMaybe<Scalars['Date']['input']>;\n  lte?: InputMaybe<Scalars['Date']['input']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  categories: CategoryMutations;\n  operations: OperationMutations;\n  orders: OrderMutations;\n  products: ProductMutations;\n  profile?: Maybe<ProfileMutations>;\n};\n\nexport type Operation = Cost | Profit;\n\nexport type OperationAddInput = {\n  amount: Scalars['Float']['input'];\n  categoryId: Scalars['String']['input'];\n  date: Scalars['Date']['input'];\n  desc?: InputMaybe<Scalars['String']['input']>;\n  name: Scalars['String']['input'];\n  type: OperationType;\n};\n\nexport type OperationGetManyInput = {\n  categoryIds?: InputMaybe<Array<Scalars['String']['input']>>;\n  createdAt?: InputMaybe<DateRange>;\n  date?: InputMaybe<DateRange>;\n  ids?: InputMaybe<Array<Scalars['String']['input']>>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  pagination?: InputMaybe<PaginationInput>;\n  sorting?: InputMaybe<SortingInput>;\n  type?: InputMaybe<OperationType>;\n  updatedAt?: InputMaybe<DateRange>;\n};\n\nexport type OperationMutations = {\n  __typename?: 'OperationMutations';\n  add: Operation;\n  patch: Operation;\n  put: Operation;\n  remove: Operation;\n};\n\nexport type OperationMutationsAddArgs = {\n  input: OperationAddInput;\n};\n\nexport type OperationMutationsPatchArgs = {\n  id: Scalars['ID']['input'];\n  input: OperationUpdateInput;\n};\n\nexport type OperationMutationsPutArgs = {\n  id: Scalars['ID']['input'];\n  input: OperationUpdateInput;\n};\n\nexport type OperationMutationsRemoveArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type OperationQueries = {\n  __typename?: 'OperationQueries';\n  getMany: OperationsResponse;\n  getOne?: Maybe<Operation>;\n};\n\nexport type OperationQueriesGetManyArgs = {\n  input?: InputMaybe<OperationGetManyInput>;\n};\n\nexport type OperationQueriesGetOneArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport enum OperationType {\n  Cost = 'Cost',\n  Profit = 'Profit',\n}\n\nexport type OperationUpdateInput = {\n  amount?: InputMaybe<Scalars['Float']['input']>;\n  categoryId?: InputMaybe<Scalars['String']['input']>;\n  date?: InputMaybe<Scalars['Date']['input']>;\n  desc?: InputMaybe<Scalars['String']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  type?: InputMaybe<OperationType>;\n};\n\nexport type OperationsResponse = {\n  __typename?: 'OperationsResponse';\n  data?: Maybe<Array<Maybe<Operation>>>;\n  pagination: ResponsePagination;\n  sorting: Sorting;\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  commandId: Scalars['String']['output'];\n  createdAt: Scalars['Date']['output'];\n  id: Scalars['ID']['output'];\n  products: Array<OrderProduct>;\n  status: OrderStatus;\n  updatedAt: Scalars['Date']['output'];\n  user: User;\n};\n\nexport type OrderAddInput = {\n  products: Array<ProductInput>;\n  status?: InputMaybe<OrderStatus>;\n};\n\nexport type OrderGetManyInput = {\n  createdAt?: InputMaybe<DateRange>;\n  ids?: InputMaybe<Array<Scalars['String']['input']>>;\n  pagination?: InputMaybe<PaginationInput>;\n  productIds?: InputMaybe<Array<Scalars['String']['input']>>;\n  sorting?: InputMaybe<SortingInput>;\n  status?: InputMaybe<OrderStatus>;\n  updatedAt?: InputMaybe<DateRange>;\n  userId?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type OrderMutations = {\n  __typename?: 'OrderMutations';\n  add: Order;\n  patch: Order;\n  put: Order;\n  remove: Order;\n};\n\nexport type OrderMutationsAddArgs = {\n  input: OrderAddInput;\n};\n\nexport type OrderMutationsPatchArgs = {\n  id: Scalars['ID']['input'];\n  input: OrderUpdateInput;\n};\n\nexport type OrderMutationsPutArgs = {\n  id: Scalars['ID']['input'];\n  input: OrderUpdateInput;\n};\n\nexport type OrderMutationsRemoveArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type OrderProduct = {\n  __typename?: 'OrderProduct';\n  _id: Scalars['ID']['output'];\n  product: Product;\n  quantity: Scalars['Int']['output'];\n};\n\nexport type OrderQueries = {\n  __typename?: 'OrderQueries';\n  getMany: OrdersResponse;\n  getOne?: Maybe<Order>;\n};\n\nexport type OrderQueriesGetManyArgs = {\n  input?: InputMaybe<OrderGetManyInput>;\n};\n\nexport type OrderQueriesGetOneArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport enum OrderStatus {\n  Delivered = 'Delivered',\n  InTransit = 'InTransit',\n  OrderCancelled = 'OrderCancelled',\n  Packaging = 'Packaging',\n  PendingConfirmation = 'PendingConfirmation',\n  Processing = 'Processing',\n  ReturnRequested = 'ReturnRequested',\n  WaitingForDelivery = 'WaitingForDelivery',\n}\n\nexport type OrderUpdateInput = {\n  products?: InputMaybe<Array<ProductInput>>;\n  status?: InputMaybe<OrderStatus>;\n};\n\nexport type OrdersResponse = {\n  __typename?: 'OrdersResponse';\n  data?: Maybe<Array<Maybe<Order>>>;\n  pagination: ResponsePagination;\n  sorting: Sorting;\n};\n\nexport type Pagination = {\n  __typename?: 'Pagination';\n  pageNumber: Scalars['Int']['output'];\n  pageSize: Scalars['Int']['output'];\n};\n\nexport type PaginationInput = {\n  pageNumber?: InputMaybe<Scalars['Int']['input']>;\n  pageSize?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  category: Category;\n  commandId: Scalars['String']['output'];\n  createdAt: Scalars['Date']['output'];\n  desc?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  oldPrice?: Maybe<Scalars['Float']['output']>;\n  photo?: Maybe<Scalars['String']['output']>;\n  price: Scalars['Float']['output'];\n  updatedAt: Scalars['Date']['output'];\n};\n\nexport type ProductAddInput = {\n  categoryId: Scalars['String']['input'];\n  desc?: InputMaybe<Scalars['String']['input']>;\n  name: Scalars['String']['input'];\n  photo?: InputMaybe<Scalars['String']['input']>;\n  price: Scalars['Float']['input'];\n};\n\nexport type ProductGetManyInput = {\n  categoryIds?: InputMaybe<Array<Scalars['String']['input']>>;\n  createdAt?: InputMaybe<DateRange>;\n  ids?: InputMaybe<Array<Scalars['String']['input']>>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  pagination?: InputMaybe<PaginationInput>;\n  sorting?: InputMaybe<SortingInput>;\n  updatedAt?: InputMaybe<DateRange>;\n};\n\nexport type ProductInput = {\n  id: Scalars['ID']['input'];\n  quantity: Scalars['Int']['input'];\n};\n\nexport type ProductMutations = {\n  __typename?: 'ProductMutations';\n  add: Product;\n  patch: Product;\n  put: Product;\n  remove: Product;\n};\n\nexport type ProductMutationsAddArgs = {\n  input: ProductAddInput;\n};\n\nexport type ProductMutationsPatchArgs = {\n  id: Scalars['ID']['input'];\n  input: ProductUpdateInput;\n};\n\nexport type ProductMutationsPutArgs = {\n  id: Scalars['ID']['input'];\n  input: ProductUpdateInput;\n};\n\nexport type ProductMutationsRemoveArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type ProductQueries = {\n  __typename?: 'ProductQueries';\n  getMany: ProductsResponse;\n  getOne?: Maybe<Product>;\n};\n\nexport type ProductQueriesGetManyArgs = {\n  input?: InputMaybe<ProductGetManyInput>;\n};\n\nexport type ProductQueriesGetOneArgs = {\n  id: Scalars['ID']['input'];\n};\n\nexport type ProductUpdateInput = {\n  categoryId?: InputMaybe<Scalars['String']['input']>;\n  desc?: InputMaybe<Scalars['String']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  oldPrice?: InputMaybe<Scalars['Float']['input']>;\n  photo?: InputMaybe<Scalars['String']['input']>;\n  price?: InputMaybe<Scalars['Float']['input']>;\n};\n\nexport type ProductsResponse = {\n  __typename?: 'ProductsResponse';\n  data?: Maybe<Array<Maybe<Product>>>;\n  pagination: ResponsePagination;\n  sorting: Sorting;\n};\n\nexport type Profile = {\n  __typename?: 'Profile';\n  commandId: Scalars['String']['output'];\n  email: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  name?: Maybe<Scalars['String']['output']>;\n  signUpDate: Scalars['Date']['output'];\n};\n\nexport type ProfileMutations = {\n  __typename?: 'ProfileMutations';\n  password?: Maybe<ProfilePasswordMutations>;\n  signin: AuthResult;\n  signup: AuthResult;\n  update: Profile;\n};\n\nexport type ProfileMutationsSigninArgs = {\n  email: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\nexport type ProfileMutationsSignupArgs = {\n  commandId: Scalars['String']['input'];\n  email: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\nexport type ProfileMutationsUpdateArgs = {\n  input: UpdateProfileInput;\n};\n\nexport type ProfilePasswordMutations = {\n  __typename?: 'ProfilePasswordMutations';\n  change: ResetPassword;\n};\n\nexport type ProfilePasswordMutationsChangeArgs = {\n  input: ChangePasswordInput;\n};\n\nexport type Profit = {\n  __typename?: 'Profit';\n  amount: Scalars['Float']['output'];\n  category: Category;\n  commandId: Scalars['String']['output'];\n  createdAt: Scalars['Date']['output'];\n  date: Scalars['Date']['output'];\n  desc?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  type: Scalars['String']['output'];\n  updatedAt: Scalars['Date']['output'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  categories: CategoryQueries;\n  operations: OperationQueries;\n  orders: OrderQueries;\n  products: ProductQueries;\n  profile?: Maybe<Profile>;\n};\n\nexport type ResetPassword = {\n  __typename?: 'ResetPassword';\n  success: Scalars['Boolean']['output'];\n};\n\nexport type ResponsePagination = {\n  __typename?: 'ResponsePagination';\n  pageNumber: Scalars['Int']['output'];\n  pageSize: Scalars['Int']['output'];\n  total: Scalars['Int']['output'];\n};\n\nexport type SignInBody = {\n  email: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\nexport type SignUpBody = {\n  commandId: Scalars['String']['input'];\n  email: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\nexport enum SortField {\n  CreatedAt = 'createdAt',\n  Date = 'date',\n  Id = 'id',\n  Name = 'name',\n  UpdatedAt = 'updatedAt',\n}\n\nexport enum SortType {\n  Asc = 'ASC',\n  Desc = 'DESC',\n}\n\nexport type Sorting = {\n  __typename?: 'Sorting';\n  field: SortField;\n  type: SortType;\n};\n\nexport type SortingInput = {\n  field?: InputMaybe<SortField>;\n  type?: InputMaybe<SortType>;\n};\n\nexport type StandardParams = {\n  __typename?: 'StandardParams';\n  id: Scalars['ID']['output'];\n};\n\nexport type UpdateProfileBody = {\n  name: Scalars['String']['input'];\n};\n\nexport type UpdateProfileInput = {\n  name: Scalars['String']['input'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  commandId: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  name?: Maybe<Scalars['String']['output']>;\n};\n","import { OrderStatus as EOrderStatus } from 'src/app/apollo/type';\n\nexport const OrderStatus = EOrderStatus;\n","import React, { useMemo, type FC } from 'react';\nimport type { TOrder } from '../type';\nimport { BtnGroup } from 'src/shared/btnGroup';\nimport $style from './style.module.scss';\nimport { OrderStatus } from 'src/entities/orderStatus';\nimport { gql, useMutation } from '@apollo/client';\nimport { Mutation, OrderUpdateInput, OrderStatus as EOrderStatus } from 'src/app/apollo/type';\nimport { useSelector } from 'react-redux';\nimport { authSelectors } from 'src/entities/auth/store';\nimport { useTranslation } from 'react-i18next';\n\ntype Props = {\n  order: TOrder;\n  isLoading?: boolean;\n};\n\nconst orderPatchMutation = gql`\n  mutation Patch($patchId: ID!, $input: OrderUpdateInput!) {\n    orders {\n      patch(id: $patchId, input: $input) {\n        id\n      }\n    }\n  }\n`;\n\nexport const OrderItem: FC<Props> = ({ order: { id, status, products }, isLoading }) => {\n  const accessToken = useSelector(authSelectors.getAccess);\n\n  const [changeOrder, { loading: isMutationLoading }] = useMutation<\n    Pick<Mutation, 'orders'>,\n    { input: OrderUpdateInput; patchId: string }\n  >(orderPatchMutation, {\n    context: {\n      headers: {\n        authorization: `Bearer ${accessToken}`,\n      },\n    },\n    // TODO remove after backend will support subscriotpions\n    update(cache) {\n      cache.evict({ fieldName: 'orders' });\n      cache.gc();\n    },\n  });\n\n  const statuses = useMemo(() => {\n    return Object.entries(OrderStatus).map(([title, value]) => ({\n      title,\n      value,\n      loading: (isMutationLoading || isLoading) && value === status,\n    }));\n  }, [isMutationLoading, status, isLoading]);\n\n  const onChangeStatus = (status: string) => {\n    changeOrder({\n      variables: {\n        patchId: id,\n        input: {\n          status: status as EOrderStatus,\n        },\n      },\n    }).catch((e) => {\n      console.log(e);\n    });\n  };\n\n  const { t } = useTranslation();\n\n  return (\n    <div className={$style['item']}>\n      <div>\n        {t('translation:orderNo')}: {id}\n      </div>\n      <div className={$style['item__list']}>\n        {products.map((item) => (\n          <img key={`${item.id}-${item.product.id}`} src={item.product.imgUrl} className={$style['item__img']} />\n        ))}\n      </div>\n      <BtnGroup items={statuses} name={`order-status-${id}`} value={status} onChange={onChangeStatus} />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"style-module_item-mmvcU\",\"item__img\":\"style-module_item__img-Nku3O\",\"item__list\":\"style-module_item__list-z7YHi\"};","import { gql, useQuery } from '@apollo/client';\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { OrderProduct, Query } from 'src/app/apollo/type';\nimport { authSelectors } from 'src/entities/auth/store';\nimport { OrderItem } from 'src/entities/order/item';\nimport { TOrderProduct } from 'src/entities/order/type';\nimport $style from './style.module.scss';\n\nconst orderListGet = gql`\n  query GetMany($input: OrderGetManyInput) {\n    orders {\n      getMany(input: $input) {\n        pagination {\n          total\n        }\n        data {\n          products {\n            _id\n            product {\n              id\n              photo\n              name\n            }\n            quantity\n          }\n          status\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const OrderList = () => {\n  const accessToken = useSelector(authSelectors.getAccess);\n\n  const { data: ordersRaw, loading: isLoading } = useQuery<Pick<Query, 'orders'>>(orderListGet, {\n    skip: !accessToken,\n    context: {\n      headers: {\n        authorization: `Bearer ${accessToken}`,\n      },\n    },\n  });\n\n  const orders = useMemo(() => {\n    return ordersRaw?.orders.getMany.data ?? [];\n  }, [ordersRaw]);\n\n  const transformApiProduct = (orderItem: OrderProduct): TOrderProduct => {\n    return {\n      id: orderItem._id,\n      qty: orderItem.quantity,\n      product: {\n        id: orderItem.product.id,\n        imgUrl: orderItem.product.photo,\n        title: orderItem.product.name,\n      },\n    };\n  };\n\n  return (\n    <div className={$style['list']}>\n      {orders.map((order) => (\n        <OrderItem\n          key={order.id}\n          order={{\n            id: order.id,\n            status: order.status,\n            products: order.products.map(transformApiProduct),\n          }}\n          isLoading={isLoading}\n        />\n      ))}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"style-module_list-P4sPS\"};","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Container } from 'src/shared/container';\nimport { firstUppercase } from 'src/shared/lib/firstUppercase';\nimport { OrderList } from 'src/widgets/orderList';\n\nexport const OrdersPage = () => {\n  const { t } = useTranslation();\n  return (\n    <main>\n      <Container>\n        <h1>{firstUppercase(t('translation:orders'))}</h1>\n      </Container>\n      <Container>\n        <OrderList />\n      </Container>\n    </main>\n  );\n};\n"],"names":["BtnGroup","_ref","items","value","name","onChange","React","className","map","item","cn","key","id","concat","type","checked","e","target","disabled","loading","htmlFor","title","Icon","OrderStatus","orderPatchMutation","gql","_templateObject","OrderItem","_ref$order","order","status","products","isLoading","accessToken","useSelector","authSelectors","getAccess","_useMutation2","_slicedToArray","useMutation","context","headers","authorization","update","cache","evict","fieldName","gc","changeOrder","isMutationLoading","statuses","useMemo","Object","entries","_ref2","_ref3","t","useTranslation","product","src","imgUrl","variables","patchId","input","console","log","orderListGet","_taggedTemplateLiteral","OrderList","_useQuery","useQuery","skip","ordersRaw","data","orders","_ordersRaw$orders$get","getMany","transformApiProduct","orderItem","_id","qty","quantity","photo","OrdersPage","Container","firstUppercase"],"sourceRoot":""}